import pygame
import random

# Initialize Pygame
pygame.init()

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)
COLORS = [(0, 255, 255), (0, 0, 255), (255, 128, 0), (255, 255, 0), (0, 255, 0), (255, 0, 0), (128, 0, 128)]

# Game dimensions
CELL_SIZE = 30
GRID_SIZE = (10, 20)
SCREEN_SIZE = (GRID_SIZE[0] * CELL_SIZE + 150, GRID_SIZE[1] * CELL_SIZE) # Adjusted to fit next block
NEXT_BLOCK_POS = (GRID_SIZE[0] * CELL_SIZE + 10, 20)

# Tetromino shapes
SHAPES = [
    [[1, 1, 1, 1]], # I
    [[1, 1, 1], [0, 1, 0]], # T
    [[1, 1], [1, 1]], # O
    [[0, 1, 1], [1, 1, 0]], # S
    [[1, 1, 0], [0, 1, 1]], # Z
    [[1, 0, 0], [1, 1, 1]], # J
    [[0, 0, 1], [1, 1, 1]]  # L
]

class Tetromino:
    def __init__(self, shape):
        self.shape = shape
        self.color = random.choice(COLORS)
        self.x = GRID_SIZE[0] // 2 - len(self.shape[0]) // 2
        self.y = 0

    def rotate(self):
        self.shape = [list(row) for row in zip(*self.shape[::-1])]

    def move(self, dx, dy):
        self.x += dx
        self.y += dy

def check_collision(grid, shape, offset):
    off_x, off_y = offset
    for y, row in enumerate(shape):
        for x, cell in enumerate(row):
            if cell and (x + off_x < 0 or x + off_x >= GRID_SIZE[0] or y + off_y >= GRID_SIZE[1] or grid[y + off_y][x + off_x]):
                return True
    return False

def join_shapes(grid, shape, offset):
    off_x, off_y = offset
    for y, row in enumerate(shape):
        for x, cell in enumerate(row):
            if cell:
                grid[y + off_y][x + off_x] = shape[y][x]
    return grid

def new_board():
    return [[0 for _ in range(GRID_SIZE[0])] for _ in range(GRID_SIZE[1])]

def clear_lines(grid):
    lines_to_clear = [i for i, row in enumerate(grid) if all(row)]
    for line in lines_to_clear:
        del grid[line]
        grid.insert(0, [0 for _ in range(GRID_SIZE[0])])
    return grid, len(lines_to_clear)

def draw_grid(surface, grid_size):
    for x in range(grid_size[0]):
        for y in range(grid_size[1]):
            rect = pygame.Rect(x*CELL_SIZE, y*CELL_SIZE, CELL_SIZE, CELL_SIZE)
            pygame.draw.rect(surface, GRAY, rect, 1)

def draw_next_block(surface, block, position):
    for y, row in enumerate(block.shape):
        for x, cell in enumerate(row):
            if cell:
                pygame.draw.rect(surface, block.color, (position[0] + x * CELL_SIZE, position[1] + y * CELL_SIZE, CELL_SIZE, CELL_SIZE), 0)
def calculate_ghost_piece(current_piece, grid):
    ghost_piece = Tetromino(current_piece.shape)
    ghost_piece.x, ghost_piece.y = current_piece.x, current_piece.y
    ghost_piece.color = (200, 200, 200)  # Lighter color for the ghost piece
    while not check_collision(grid, ghost_piece.shape, (ghost_piece.x, ghost_piece.y + 1)):
        ghost_piece.move(0, 1)
    return ghost_piece

def main():
    screen = pygame.display.set_mode(SCREEN_SIZE)
    pygame.display.set_caption('Tetris')

    grid = new_board()
    clock = pygame.time.Clock()
    fall_time = 0
    fall_speed = 0.3
    current_piece = Tetromino(random.choice(SHAPES))
    next_piece = Tetromino(random.choice(SHAPES))
    score = 0
    paused = False
    game_over = False

    # Initialize statistics
    lines_cleared = 0
    pieces_placed = 0
    tetrises_achieved = 0

    running = True
    while running:
        screen.fill(BLACK)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    if not game_over:
                        paused = not paused
                    else:
                        running = False
                if not paused and not game_over:
                    if event.key == pygame.K_LEFT:
                        current_piece.move(-1, 0)
                        if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                            current_piece.move(1, 0)
                    if event.key == pygame.K_RIGHT:
                        current_piece.move(1, 0)
                        if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                            current_piece.move(-1, 0)
                    if event.key == pygame.K_DOWN:
                        current_piece.move(0, 1)
                        if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                            current_piece.move(0, -1)
                    if event.key == pygame.K_UP:
                        current_piece.rotate()
                        if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                            current_piece.rotate()
                    if event.key == pygame.K_SPACE:
                        while not check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y + 1)):
                            current_piece.move(0, 1)
                        grid = join_shapes(grid, current_piece.shape, (current_piece.x, current_piece.y))
                        grid, cleared = clear_lines(grid)
                        score += cleared
                        current_piece = next_piece
                        next_piece = Tetromino(random.choice(SHAPES))
                        if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                            game_over = True

        if not paused and not game_over:
            fall_time += clock.get_rawtime()
            clock.tick()

            if fall_time / 1000 > fall_speed:
                fall_time = 0
                current_piece.move(0, 1)
                if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                    current_piece.move(0, -1)
                    grid = join_shapes(grid, current_piece.shape, (current_piece.x, current_piece.y))
                    cleared = len(clear_lines(grid))
                    if cleared > 0:
                        lines_cleared += cleared
                        if cleared == 4:
                            tetrises_achieved += 1
                    pieces_placed += 1
                    current_piece = next_piece
                    next_piece = Tetromino(random.choice(SHAPES))
                    if check_collision(grid, current_piece.shape, (current_piece.x, current_piece.y)):
                        game_over = True
        # Calculate and render ghost piece -- add a toggle in menu TBD
            ghost_piece = calculate_ghost_piece(current_piece, grid)
            for y, row in enumerate(ghost_piece.shape):
                for x, cell in enumerate(row):
                    if cell:
                        pygame.draw.rect(screen, ghost_piece.color, ((ghost_piece.x + x) * CELL_SIZE, (ghost_piece.y + y) * CELL_SIZE, CELL_SIZE, CELL_SIZE), 0)

        if paused:
            font = pygame.font.SysFont('Arial', 30)
            text = font.render('Paused - Press ESC to Resume', True, WHITE)
            screen.blit(text, (SCREEN_SIZE[0] / 2 - text.get_width() / 2, SCREEN_SIZE[1] / 2 - text.get_height() / 2))

        if not paused and not game_over:
            draw_grid(screen, GRID_SIZE)
            draw_next_block(screen, next_piece, NEXT_BLOCK_POS)

            for y, row in enumerate(grid):
                for x, cell in enumerate(row):
                    if cell:
                        pygame.draw.rect(screen, COLORS[cell - 1], (x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE), 0)

            for y, row in enumerate(current_piece.shape):
                for x, cell in enumerate(row):
                    if cell:
                        pygame.draw.rect(screen, current_piece.color, ((current_piece.x + x) * CELL_SIZE, (current_piece.y + y) * CELL_SIZE, CELL_SIZE, CELL_SIZE), 0)

            font = pygame.font.SysFont('Arial', 25)
            score_text = font.render(f'Score: {score}', True, WHITE)
            screen.blit(score_text, (5, 5))

        if game_over:
            font = pygame.font.SysFont('Arial', 30)
            game_over_text = font.render('Game Over - Press ESC to Exit', True, WHITE)
            screen.blit(game_over_text, (SCREEN_SIZE[0] / 2 - game_over_text.get_width() / 2, SCREEN_SIZE[1] / 2 - game_over_text.get_height() / 2))

# Display statistics
        font = pygame.font.SysFont('Arial', 25)
        lines_text = font.render(f'Lines Cleared: {lines_cleared}', True, WHITE)
        pieces_text = font.render(f'Pieces Placed: {pieces_placed}', True, WHITE)
        tetrises_text = font.render(f'Tetrises: {tetrises_achieved}', True, WHITE)
        screen.blit(lines_text, (5, 30))
        screen.blit(pieces_text, (5, 55))
        screen.blit(tetrises_text, (5, 80))

        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()
